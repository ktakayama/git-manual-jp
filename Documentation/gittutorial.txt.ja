gittutorial(7)
==============
// = gittutorial(7)

NAME
----
// == NAME
gittutorial - A tutorial introduction to git (for version 1.5.1 or newer)
// gittutorial - git チュートリアル (バージョン 1.5.1 以降用)

SYNOPSIS
--------
// == SYNOPSIS
git *
// git *

DESCRIPTION
-----------
// == 解説

This tutorial explains how to import a new project into git, make
changes to it, and share changes with other developers.
// このチュートリアルでは git に新しいプロジェクトソースをインポートする方法と、
// そこに変更を加える方法、そして他の開発者と変更を共有する方法を説明します。

If you are instead primarily interested in using git to fetch a project,
for example, to test the latest version, you may prefer to start with
the first two chapters of link:user-manual.html[The Git User's Manual].
// もしあなたの主な目的がプロジェクトの変更を取得することであるなら
// (例えば最新バージョンのソースを取得してテストするなど)、
// link:user-manual.html[Git ユーザマニュアル] の最初の２章から始める方が
// 良いかもしれません。

First, note that you can get documentation for a command such as
`git log --graph` with:
// まず最初に、マニュアルの参照方法を説明します。例えば "git log" コマンドのマニュアル
// は以下の方法で取得できます。

------------------------------------------------
$ man git-log
------------------------------------------------

or:
// もしくは:

------------------------------------------------
$ git help log
------------------------------------------------

With the latter, you can use the manual viewer of your choice; see
linkgit:git-help[1] for more information.
// もう一つの方法としてgit-helpコマンドを使用する方法があります。
// 詳細についてはlinkgit:git-help[1] をご覧下さい。

It is a good idea to introduce yourself to git with your name and
public email address before doing any operation.  The easiest
way to do so is:
// どんな操作をするよりも前に git に自分の氏名とメールアドレスを紹介するのは良いアイデアです。
// 最も簡単な方法は以下の通りです:

------------------------------------------------
$ git config --global user.name "Your Name Comes Here"
$ git config --global user.email you@yourdomain.example.com
------------------------------------------------


Importing a new project
-----------------------
// == 新規プロジェクトのインポート

Assume you have a tarball project.tar.gz with your initial work.  You
can place it under git revision control as follows.
// あなたの作品が入った tarball project.tar.gz があるとします。
// あなたは以下のようにしてそれを git のリビジョン管理下に置くことができます。

------------------------------------------------
$ tar xzf project.tar.gz
$ cd project
$ git init
------------------------------------------------

Git will reply
// この操作により git は以下のメッセージを表示するでしょう。

------------------------------------------------
Initialized empty Git repository in .git/
------------------------------------------------

You've now initialized the working directory--you may notice a new
directory created, named ".git".
// これで作業ディレクトリの初期化が完了しました。そして、あなたは ".git" という名前の
// ディレクトリが作成されたことに気がつくでしょう。

Next, tell git to take a snapshot of the contents of all files under the
current directory (note the '.'), with 'git-add':
// 次に、'git-add' を使用して カレントディレクトリ下の
// すべてのファイルのスナップショットを取得するように git に依頼します ('.'があることに注意)：

------------------------------------------------
$ git add .
------------------------------------------------

This snapshot is now stored in a temporary staging area which git calls
the "index".  You can permanently store the contents of the index in the
repository with 'git-commit':
// このスナップショットは "索引(index)" と呼ばれる一時エリアに
// 格納されます。'git-commit' を用いるとリポジトリに索引の
// 中身を永続的に格納させることができます：

------------------------------------------------
$ git commit
------------------------------------------------

This will prompt you for a commit message.  You've now stored the first
version of your project in git.
// コミットコマンドを実行すると、コミットメッセージの入力が求められます。
// その後、プロジェクトの最初のバージョンが git に格納させます。

Making changes
--------------
// == 変更の実施

Modify some files, then add their updated contents to the index:
// いくつかのファイルを変更した後、更新した内容を索引に追加します：

------------------------------------------------
$ git add file1 file2 file3
------------------------------------------------

You are now ready to commit.  You can see what is about to be committed
using 'git-diff' with the --cached option:
// これでコミットする準備ができました。'git-diff' を --cached オプション付きで
// 実行するとコミットされる内容を確認できます：

------------------------------------------------
$ git diff --cached
------------------------------------------------

(Without --cached, 'git-diff' will show you any changes that
you've made but not yet added to the index.)  You can also get a brief
summary of the situation with 'git-status':
// (--cached を指定しない場合、'git-diff' は修正されているがまだ索引に
// 追加されていない変更を表示します。) 'git-status' を使用すると
// 簡潔なまとめを表示することもできます。

------------------------------------------------
$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#	modified:   file1
#	modified:   file2
#	modified:   file3
#
------------------------------------------------

If you need to make any further adjustments, do so now, and then add any
newly modified content to the index.  Finally, commit your changes with:
// さらに変更が必要な場合は、それを行い、新しく変更した内容を索引に追加します。
// 最後に、変更をコミットします：

------------------------------------------------
$ git commit
------------------------------------------------

This will again prompt you for a message describing the change, and then
record a new version of the project.
// この操作を行なうとエディタが起動され、コミットメッセージの入力が促されます。
// メッセージを入力しエディタを終了するとプロジェクトの新しいバージョンが記録されます。

Alternatively, instead of running 'git-add' beforehand, you can use
// コミットのもう１つの方法として、事前に 'git-add' を実行する代わりに、以下のようにすることもできます。

------------------------------------------------
$ git commit -a
------------------------------------------------

which will automatically notice any modified (but not new) files, add
them to the index, and commit, all in one step.
// この方法では変更ファイル(ただし新規ファイルは除く)を自動的に検出し、
// それらを索引に追加し、コミットするという操作を纏めて実行します。

A note on commit messages: Though not required, it's a good idea to
begin the commit message with a single short (less than 50 character)
line summarizing the change, followed by a blank line and then a more
thorough description.  Tools that turn commits into email, for
example, use the first line on the Subject: line and the rest of the
commit in the body.
// コミットメッセージに関する注意: 必須ではありませんが、格納メッセージを
// 次のようにするのは良い考えです。１行の短文(50文字未満)で変更のサマリを書き、
// その後に空白行を挟んで、最後により綿密な記述をまとめる。
// そうすることで、例えばコミットした内容を E-Mail に変換するツールにて、
// Subjectに最初の行を使用し、残りの行を本文にすることができます。

Git tracks content not files
----------------------------
// == git はファイルではなくコンテンツを追跡する

Many revision control systems provide an `add` command that tells the
system to start tracking changes to a new file.  Git's `add` command
does something simpler and more powerful: 'git-add' is used both for new
and newly modified files, and in both cases it takes a snapshot of the
given files and stages that content in the index, ready for inclusion in
the next commit.
// 多くのリビジョン管理システムでは `add` コマンドは新規ファイルを追跡対象に加える
// 役目をします。git の `add` コマンドは、よりシンプルでパワフルです：
// 'git-add' は新規ファイルと新しい変更ファイルの両方に対して使用され、
// どちらの場合にも指定したファイルのスナップショットをとり、索引にその中身を
// 登録し、次のコミットに含める項目の準備をします。

Viewing project history
-----------------------
// == プロジェクトの履歴を参照する

At any point you can view the history of your changes using
// どんな時でも、次のコマンドを実行することで変更の履歴をみることができます。

------------------------------------------------
$ git log
------------------------------------------------

If you also want to see complete diffs at each step, use
// 各ステップの完全な差分を参照したい時は、次のようにします。

------------------------------------------------
$ git log -p
------------------------------------------------

Often the overview of the change is useful to get a feel of
each step
// 修正したファイルの名前とログメッセージを参照したい時は、次のようにします。

------------------------------------------------
$ git log --stat --summary
------------------------------------------------

Managing branches
-----------------
// == ブランチ管理

A single git repository can maintain multiple branches of
development.  To create a new branch named "experimental", use
// git は１つのリポジトリ内に複数のブランチを作成することができます。
// "experimental" という名前の新しいブランチを作成するには次のようにします。

------------------------------------------------
$ git branch experimental
------------------------------------------------

If you now run
// 次のコマンドを実行すると

------------------------------------------------
$ git branch
------------------------------------------------

you'll get a list of all existing branches:
// 存在する全てのブランチのリストが表示されます：

------------------------------------------------
  experimental
* master
------------------------------------------------

The "experimental" branch is the one you just created, and the
"master" branch is a default branch that was created for you
automatically.  The asterisk marks the branch you are currently on;
type
// "experimental" ブランチは今あなたが作成したものです、そして、
// "master" ブランチは自動的に作成されたデフォルトブランチです。
// "*" のマークは現在作業中のブランチを指しています。;
// 以下のコマンド

------------------------------------------------
$ git checkout experimental
------------------------------------------------

to switch to the experimental branch.  Now edit a file, commit the
change, and switch back to the master branch:
// を打つと experimental ブランチにスイッチします。
// さて、ファイルを編集し、コミットし、master ブランチに戻ってください:

------------------------------------------------
(edit file)
$ git commit -a
$ git checkout master
------------------------------------------------

Check that the change you made is no longer visible, since it was
made on the experimental branch and you're back on the master branch.
// experimental ブランチで変更した後、master ブランチに戻っている為、
// 変更した内容がもはや見えなくなっていることを確認してください。

You can make a different change on the master branch:
// あなたは master ブランチ上で別の変更をすることができます：

------------------------------------------------
(edit file)
$ git commit -a
------------------------------------------------

at this point the two branches have diverged, with different changes
made in each.  To merge the changes made in experimental into master, run
// この時点で２つのブランチは分岐しました。それぞれ異なる変更が行なわれています。
// experimental の変更を master にマージするには、以下のようにします。

------------------------------------------------
$ git merge experimental
------------------------------------------------

If the changes don't conflict, you're done.  If there are conflicts,
markers will be left in the problematic files showing the conflict;
// 変更がコンフリクト(競合)しない場合は、これでマージ完了です。
// コンフリクトがある時は、マーカーが問題のあるファイル内に残り、
// コンフリクトを示すでしょう。そして、

------------------------------------------------
$ git diff
------------------------------------------------

will show this.  Once you've edited the files to resolve the
conflicts,
// を行うとマーカーの位置を示します。
// コンフリクトを解消する為に一度ファイルを編集し、以下のようにすると

------------------------------------------------
$ git commit -a
------------------------------------------------

will commit the result of the merge. Finally,
// マージした結果がコミットされます。
// マージした結果は GUI ツールで確認することができます。

------------------------------------------------
$ gitk
------------------------------------------------

will show a nice graphical representation of the resulting history.
// を実行すると、実行結果の履歴がグラフ表示されます。

At this point you could delete the experimental branch with
// この時点で、experimental ブランチを削除できるようになりました。
// 次のようにして行います。

------------------------------------------------
$ git branch -d experimental
------------------------------------------------

This command ensures that the changes in the experimental branch are
already in the current branch.
// このコマンドは、experimental ブランチで行った変更が既に現在のブランチに
// 含まれていることを確認してからブランチを削除します。

If you develop on a branch crazy-idea, then regret it, you can always
delete the branch with
// マージしていないブランチを強制的に削除したい時は
// (例えば crazy-idea ブランチで変更を行い、次に、その変更が間違いであると思ったなら)
// オプションを -d ではなく -D に変更して実行します。

-------------------------------------
$ git branch -D crazy-idea
-------------------------------------

Branches are cheap and easy, so this is a good way to try something
out.
// ブランチは安くて簡単です。何かを試す時にはとても便利です。

Using git for collaboration
---------------------------
// == 共同開発における git の利用

Suppose that Alice has started a new project with a git repository in
/home/alice/project, and that Bob, who has a home directory on the
same machine, wants to contribute.
// アリスが /home/alice/project にある git リポジトリで新規プロジェクトを
// 開始したとします。同じマシン上にホームディレクトリを持っているボブが
// アリスの作業を手伝いたいとします。

Bob begins with:
// ボブは次のようにして自分の作業用エリアを作成します。

------------------------------------------------
bob$ git clone /home/alice/project myrepo
------------------------------------------------

This creates a new directory "myrepo" containing a clone of Alice's
repository.  The clone is on an equal footing with the original
project, possessing its own copy of the original project's history.
// これによりアリスのリポジトリの複製を含んだ "myrepo" という
// 新規ディレクトリが作成されます。
// この複製は元のプロジェクトと対等な立場であり、元のプロジェクトの
// 履歴のコピーを持っています。

Bob then makes some changes and commits them:
// 次に、ボブはいくつか変更をしてコミットします：

------------------------------------------------
(edit files)
bob$ git commit -a
(repeat as necessary)
------------------------------------------------

When he's ready, he tells Alice to pull changes from the repository
at /home/bob/myrepo.  She does this with:
// 準備ができたら、彼は /home/bob/myrepo にあるリポジトリから変更を
// 取得(pull)するようにアリスに伝えます。
// 彼女は以下のようにして取得します：

------------------------------------------------
alice$ cd /home/alice/project
alice$ git pull /home/bob/myrepo master
------------------------------------------------

This merges the changes from Bob's "master" branch into Alice's
current branch.  If Alice has made her own changes in the meantime,
then she may need to manually fix any conflicts.
// これはボブの "master" ブランチで行なわれた変更をアリスの現在のブランチにマージします。
// アリスが自身の変更もしている場合は、彼女は手動で全てのコンフリクト(競合)を
// 解消する必要があります。

The "pull" command thus performs two operations: it fetches changes
from a remote branch, then merges them into the current branch.
// この結果からもわかるとおり、"pull" コマンドは次の２つの操作を実行します：
// (1) リモートブランチから変更を取得。(2) それらを現在のブランチにマージ。

Note that in general, Alice would want her local changes committed before
initiating this "pull".  If Bob's work conflicts with what Alice did since
their histories forked, Alice will use her working tree and the index to
resolve conflicts, and existing local changes will interfere with the
conflict resolution process (git will still perform the fetch but will
refuse to merge --- Alice will have to get rid of her local changes in
some way and pull again when this happens).
// ここで留意すべき事は、通常アリスは"pull"を開始する前に彼女のローカルな変更を
// 行いたいであろうということです。
// もしボブの作業が彼らの履歴が分岐した以降の作業と競合するならば、
// アリスは競合の解消するために彼女のワーキングツリーとインデックスを使用するでしょう、
// そしてすでに存在するローカルな変更は競合の解決プロセスを妨げるでしょう。
// （git はfetchは行いますがマージを拒否します --- これが起こったときアリスは彼女の
// ローカルな変更を何らかの方法で取り除いてからふたたびpullしなければならないでしょう)

Alice can peek at what Bob did without merging first, using the "fetch"
command; this allows Alice to inspect what Bob did, using a special
symbol "FETCH_HEAD", in order to determine if he has anything worth
pulling, like this:
// アリスはまず最初にマージせずボブの作業を"fetch"コマンドを使用してのぞき見します。
// これによりアリスは特別なシンボル"FETCH_HEAD"を使用してボブの作業が
// pullするに値するかどうかを検査することができます。
// これは以下のように行います。

------------------------------------------------
alice$ git fetch /home/bob/myrepo master
alice$ git log -p HEAD..FETCH_HEAD
------------------------------------------------

This operation is safe even if Alice has uncommitted local changes.
The range notation HEAD..FETCH_HEAD" means "show everything that is reachable
from the FETCH_HEAD but exclude anything that is reachable from HEAD.
Alice already knows everything that leads to her current state (HEAD),
and reviewing what Bob has in his state (FETCH_HEAD) that she has not
seen with this command
// この操作はたとえアリスがコミットしていないローカルな変更を
// 行っていても安全です。
// 範囲表記HEAD..FETCH_HEADはFETCH_HEADから到達可能だが、
// HEADからは到達可能ではないコミットすべてを表すという意味です。
// アリスはすでに現在の状態(HEAD)までのすべてを知っています、
// そしてこのコマンドを使用して彼女にとって未知な、
// ボブが彼の状態(FETCH_HEAD)に至るまでに行った作業を
// レビューします。

If Alice wants to visualize what Bob did since their histories forked
she can issue the following command:
// もしアリスがフォーク後にボブが行った作業を
// ビジュアル化したいならば次のコマンドを実行します。

------------------------------------------------
$ gitk HEAD..FETCH_HEAD
------------------------------------------------

This uses the same two-dot range notation we saw earlier with 'git log'.
// これは先ほど'git log'で見た２つのドットで表した範囲表記を使用します。

Alice may want to view what both of them did since they forked.
She can use three-dot form instead of the two-dot form:
// アリスは分岐以降に彼らが両方がおこなった作業を見たいかもしれません。
// 彼女は2つドットのかわりに3つのドットを使用できます。

------------------------------------------------
$ gitk HEAD...FETCH_HEAD
------------------------------------------------

This means "show everything that is reachable from either one, but
exclude anything that is reachable from both of them".
// これはどちらか片方から到達可能だが、両方からは
// 到達可能ではないコミットすべてを表すという意味です。

Please note that these range notation can be used with both gitk
and "git log".
// ここで留意すべき事は、これらの範囲表記はgitkと"git log"
// 両方で使用可能であるということです。

After inspecting what Bob did, if there is nothing urgent, Alice may
decide to continue working without pulling from Bob.  If Bob's history
does have something Alice would immediately need, Alice may choose to
stash her work-in-progress first, do a "pull", and then finally unstash
her work-in-progress on top of the resulting history.
// ボブの作業を検査した後、もし緊急ではないなら、
// アリスはボブからpullをせずに自分の作業を進めようとするかもしれません。
// もしボブの履歴がすぐに必要なら、アリスは彼女の仕掛中の作業を後回しにして
// "pull"をしてから仕掛中だった作業を再開するかもしれません。

When you are working in a small closely knit group, it is not
unusual to interact with the same repository over and over
again.  By defining 'remote' repository shorthand, you can make
it easier:
// (1) と (2) の操作を同時に行なわず、別々に実行したい場合もあるかもしれません。
// (具体的には、リモートブランチで行なわれた変更を別のブランチ名で自身のリポジトリ上にコピーし、
// その後に、変更点を確認してから現在のブランチにマージしたい場合です)
// 'remote' リポジトリの略称を登録することで、この作業をより簡単に行うことができます：

------------------------------------------------
alice$ git remote add bob /home/bob/myrepo
------------------------------------------------

With this, Alice can perform the first part of the "pull" operation alone using the
'git-fetch' command without merging them with her own branch,
using:
// この結果、'git-fetch' コマンドを使用して、それら変更を彼女の自身の
// ブランチにマージすることなしに、(1) の操作を単独で実行できるようになります。
// 次のようにです：

-------------------------------------
alice$ git fetch bob
-------------------------------------

Unlike the longhand form, when Alice fetches from Bob using a
remote repository shorthand set up with 'git-remote', what was
fetched is stored in a remote tracking branch, in this case
`bob/master`.  So after this:
// pull を使用した時と異なり、、'git-remote' によって設定したリモートリポジトリの略記
// を用いてアリスがボブから変更を取得した場合、
// 取得した変更はリモート追跡用ブランチに格納されます。
// 上記例の場合、`bob/master` ブランチです。
// その為、この後に

-------------------------------------
alice$ git log -p master..bob/master
-------------------------------------

shows a list of all the changes that Bob made since he branched from
Alice's master branch.
// を実行すると、ボブがアリスの master ブランチから分岐した以降のボブの変更
// 全てが表示されます。

After examining those changes, Alice
could merge the changes into her master branch:
// それら変更を確認した後に、アリスは彼女の master ブランチに変更をマージ
// することができます。次のようにします:

-------------------------------------
alice$ git merge bob/master
-------------------------------------

This `merge` can also be done by 'pulling from her own remote
tracking branch', like this:
// この `merge` は '彼女自身のリモート追跡ブランチから取得(pull)する' ことによって
// 行うこともできます。次のようにします：

-------------------------------------
alice$ git pull . remotes/bob/master
-------------------------------------

Note that git pull always merges into the current branch,
regardless of what else is given on the command line.
// git pull は常に現在のブランチにマージすることに注意してください。
// これは他に何かコマンドラインで与えられていても関係ありません。

Later, Bob can update his repo with Alice's latest changes using
// その後、ボブは次のようにしてアリスの最新の変更状態で彼のリポジトリを
// 更新することができます。

-------------------------------------
bob$ git pull
-------------------------------------

Note that he doesn't need to give the path to Alice's repository;
when Bob cloned Alice's repository, git stored the location of her
repository in the repository configuration, and that location is
used for pulls:
// 彼がアリスのリポジトリパスを与える必要がないことに注意してください;
// これはボブがアリスのリポジトリを複製したときに、git は彼女の
// リポジトリの位置をリポジトリ構成内に格納しているためです。
// そして、そのリポジトリ位置が pull した時に使用されます。

-------------------------------------
bob$ git config --get remote.origin.url
/home/alice/project
-------------------------------------

(The complete configuration created by 'git-clone' is visible using
`git config -l`, and the linkgit:git-config[1] man page
explains the meaning of each option.)
// ('git-clone' により作成された完全な構成は `git config -l` を使用する
// と確認できます。また、linkgit:git-config[1] の man ページにて
// 各オプションの意味が説明されています)

Git also keeps a pristine copy of Alice's master branch under the
name "origin/master":
// また、gitは "origin/master" という名前でアリスの master ブランチの
// 初期コピーを保持します:

-------------------------------------
bob$ git branch -r
  origin/master
-------------------------------------

If Bob later decides to work from a different host, he can still
perform clones and pulls using the ssh protocol:
// ボブが後に異なるホストで作業することを決めたなら、彼は、
// ssh プロトコルを使用して clone と pull をすることができます：

-------------------------------------
bob$ git clone alice.org:/home/alice/project myrepo
-------------------------------------

Alternatively, git has a native protocol, or can use rsync or http;
see linkgit:git-pull[1] for details.
// 代わりに、gitが持っているネイティブなプロトコルか、rsync, http を
// 使用することもできます；
// 詳細は linkgit:git-pull[1] を参照してください。

Git can also be used in a CVS-like mode, with a central repository
that various users push changes to; see linkgit:git-push[1] and
linkgit:gitcvs-migration[7].
// git はまた、CVS ライクなモードで使用することもできます。
// つまり、中央リポジトリを持ち、様々なユーザが変更を push するような使用法です。
// それらの詳細は linkgit:git-push[1] と linkgit:gitcvs-migration[7] を
// 参照してください。

Exploring history
-----------------
// == 履歴の探索

Git history is represented as a series of interrelated commits.  We
have already seen that the 'git-log' command can list those commits.
Note that first line of each git log entry also gives a name for the
commit:
// git の履歴は一連の相関的なコミットにより表されています。
// 我々は既に 'git-log' コマンドがそれらのコミットをリスト表示するのを
// 見ました。
// 各 git log エントリの最初の行が、そのコミットに対する名前を示していることに
// 注意してください。

-------------------------------------
$ git log
commit c82a22c39cbc32576f64f5c6b3f24b99ea8149c7
Author: Junio C Hamano <junkio@cox.net>
Date:   Tue May 16 17:18:22 2006 -0700

    merge-base: Clarify the comments on post processing.
-------------------------------------

We can give this name to 'git-show' to see the details about this
commit.
// この名前を'git-show'コマンドで使用すると、そのコミットに関する詳細を見ることができます。

-------------------------------------
$ git show c82a22c39cbc32576f64f5c6b3f24b99ea8149c7
-------------------------------------

But there are other ways to refer to commits.  You can use any initial
part of the name that is long enough to uniquely identify the commit:
// しかし、それ以外にもコミットを参照する方法があります。
// git log が示すコミットの名前全てではなく、
// そのコミットを一意に特定できるだけの十分な長さをもった先頭の数文字を
// 用いる方法です。

-------------------------------------
$ git show c82a22c39c	# the first few characters of the name are
//			# コミット名の最初の数文字で
			# usually enough
//			# 大抵は十分です
$ git show HEAD		# the tip of the current branch
//			# 現在のブランチの先端(tip)
$ git show experimental	# the tip of the "experimental" branch
//			# ブランチ "experimental" の先端(tip)
-------------------------------------

Every commit usually has one "parent" commit
which points to the previous state of the project:
// 全てのコミットは常に１つの "parent"(親) のコミットを持ち、
// それはプロジェクトの１つ前の状態を指し示します：

-------------------------------------
$ git show HEAD^  # to see the parent of HEAD
//		  # HEAD の親を表示
$ git show HEAD^^ # to see the grandparent of HEAD
//		  # HEAD の祖父を表示
$ git show HEAD~4 # to see the great-great grandparent of HEAD
//		  # HEAD の４つ前を表示
-------------------------------------

Note that merge commits may have more than one parent:
// マージコミットは１つ以上の親を持つ場合があることに注意してください：

-------------------------------------
$ git show HEAD^1 # show the first parent of HEAD (same as HEAD^)
//		  # HEAD の１つ目の親を表示(HEADと同じ)
$ git show HEAD^2 # show the second parent of HEAD
//		  # HEAD の２つ目の親を表示
-------------------------------------

You can also give commits names of your own; after running
// また、コミットの名前をつけることもできます；次のコマンド

-------------------------------------
$ git tag v2.5 1b2e1d63ff
-------------------------------------

you can refer to 1b2e1d63ff by the name "v2.5".  If you intend to
share this name with other people (for example, to identify a release
version), you should create a "tag" object, and perhaps sign it; see
linkgit:git-tag[1] for details.
// を実行すると、"v2.5" という名前で 1b2e1d63ff を参照できるようになります。
// この名前を(例えば、リリースバージョンを特定する為に)他の人々と共有するには、
// "tag" オブジェクトを作成し、それに署名をつけるべきです。；
// 詳細は linkgit:git-tag[1] を参照してください。

Any git command that needs to know a commit can take any of these
names.  For example:
// コミットを知る必要のあるどんな git コマンドも、
// この名前を用いることができます。
// 例えば以下のとおりです:

-------------------------------------
$ git diff v2.5 HEAD	 # compare the current HEAD to v2.5
//			 # 現在の HEAD を v2.5 と比較
$ git branch stable v2.5 # start a new branch named "stable" based
//			 # v2.5の位置に "stable" という名前の新しい
			 # at v2.5
//			 # ブランチを作成
$ git reset --hard HEAD^ # reset your current branch and working
//			 # 現在のブランチと作業ディレクトリをリセットし、
			 # directory to its state at HEAD^
//			 # HEAD^ の状態にします
-------------------------------------

Be careful with that last command: in addition to losing any changes
in the working directory, it will also remove all later commits from
this branch.  If this branch is the only branch containing those
commits, they will be lost.  Also, don't use 'git-reset' on a
publicly-visible branch that other developers pull from, as it will
force needless merges on other developers to clean up the history.
If you need to undo changes that you have pushed, use 'git-revert'
instead.
// 上記の最後のコマンドに注意してください：
// 作業ディレクトリ内の変更を失うことに加えて、このブランチから
// 全ての保留中のコミットを削除してしまうでしょう。
// もしこのブランチがそれらコミットを含む唯一のブランチであった場合、
// それらコミットは削除されます。
// また、他の開発者がそこから pull するような公的に目に見えるブランチでは
// 'git-reset' は使用しないでください。もしそうすると、他の開発者に
// 履歴をきれいにするために、不必要なマージを強制させることになります。
// あなたが push した変更を元に戻す必要があるなら、'git-revert' を
// その代わりに使用してください。

The 'git-grep' command can search for strings in any version of your
project, so
// 'git-grep' コマンドは当該プロジェクトの任意のバージョン内の文字列を検索することができます。
// 例えば、

-------------------------------------
$ git grep "hello" v2.5
-------------------------------------

searches for all occurrences of "hello" in v2.5.
// は v2.5 内の "hello" を全文検索します。

If you leave out the commit name, 'git-grep' will search any of the
files it manages in your current directory.  So
// コミット名を省いた場合、'git-grep' は現在のディレクトリ内で履歴管理
// 対象下にある全てのファイルを検索します。
// 従って、次のコマンド

-------------------------------------
$ git grep "hello"
-------------------------------------

is a quick way to search just the files that are tracked by git.
// は、git により追跡されているファイルに対して検索する手っとり早い方法です。

Many git commands also take sets of commits, which can be specified
in a number of ways.  Here are some examples with 'git-log':
// git コマンドはまた、コミットの集合を扱うこともできます。
// その方法は何通りもの方法があります。
// 以下は、'git-log' における使用例です。

-------------------------------------
$ git log v2.5..v2.6            # commits between v2.5 and v2.6
//				# v2.5 から 2.6 までのコミット
$ git log v2.5..                # commits since v2.5
//				# v2.5 以降のコミット
$ git log --since="2 weeks ago" # commits from the last 2 weeks
//				# 最近２週間のコミット
$ git log v2.5.. Makefile       # commits since v2.5 which modify
//				# v2.5 以降に Makefile を
				# Makefile
//				# 変更しているコミット
-------------------------------------

You can also give `git log` a "range" of commits where the first is not
necessarily an ancestor of the second; for example, if the tips of
the branches "stable-release" and "master" diverged from a common
commit some time ago, then
// `git log` にコミットの "範囲" を指定することもできます。
// その際、範囲指定の１つ目は必ずしも２つ目の祖先である必要はありません；
// 例えば、ブランチ "stable-release" と "master" の先端(tip)は、
// ある時点の共通のコミットから枝分かれしている場合、次のコマンド

-------------------------------------
$ git log stable..experimental
-------------------------------------

will list commits made in the experimental branch but not in the
stable branch, while
// は、ブランチ experimental にあって、ブランチ stable に存在しないコミットとリストを
// 表示します。一方、次のコマンド

-------------------------------------
$ git log experimental..stable
-------------------------------------

will show the list of commits made on the stable branch but not
the experimental branch.
// は、ブランチ stable にあって、ブランチ experimental に存在しない
// コミットのリストを表示します。

The 'git-log' command has a weakness: it must present commits in a
list.  When the history has lines of development that diverged and
then merged back together, the order in which 'git-log' presents
those commits is meaningless.
// 'git-log' コマンドには弱点があります:
// それはコミットのリスト表示に関するものです。
// 履歴が枝分かれし両者がマージされた開発ラインを持つ場合、'git-log' の
// コミットの表示順序には意味がありません。

Most projects with multiple contributors (such as the Linux kernel,
or git itself) have frequent merges, and 'gitk' does a better job of
visualizing their history.  For example,
// 複数の貢献者を持つプロジェクト(例えば Linux カーネルや git自身)は、
// 頻繁にマージが行われます。'gitk' はそれら履歴をビジュアルに表示するので
// 大変重宝します。
// 例えば、次のコマンド

-------------------------------------
$ gitk --since="2 weeks ago" drivers/
-------------------------------------

allows you to browse any commits from the last 2 weeks of commits
that modified files under the "drivers" directory.  (Note: you can
adjust gitk's fonts by holding down the control key while pressing
"-" or "+".)
// を行うことで、最近２週間に "drivers" ディレクトリを修正したコミットを
// 閲覧することができます。
// (注意: gitk のフォントはコントロールキーを押さえながら "-" か "+"
// を押すことで調整できます。)

Finally, most commands that take filenames will optionally allow you
to precede any filename by a commit, to specify a particular version
of the file:
// 最後に、オプションとしてファイル名を引数に取る大抵のコマンドが
// コミットにファイル名を付けられる点を説明します。
// あるファイルの特定のバージョンを指し示すには次のようにします：

-------------------------------------
$ git diff v2.5:Makefile HEAD:Makefile.in
-------------------------------------

You can also use 'git-show' to see any such file:
// 'git-show' コマンドでも、次のようにファイルを指定できます：

-------------------------------------
$ git show v2.5:Makefile
-------------------------------------

Next Steps
----------
// == 次のステップ

This tutorial should be enough to perform basic distributed revision
control for your projects.  However, to fully understand the depth
and power of git you need to understand two simple ideas on which it
is based:
// このチュートリアルは、あなたのプロジェクトで基本的な分散リビジョン管理を
// 行うには十分なはずです。
// しかし、git の奥深さと能力を十分に理解するには、git の
// ベースになっている２つのシンプルなアイデアを理解する必要があります。：

  * The object database is the rather elegant system used to
    store the history of your project--files, directories, and
    commits.
//   * オブジェクトデータベースはどちらかというと簡潔なシステムであり、
//     あなたのプロジェクトの履歴(ファイル、ディレクトリ、コミット)を
//     格納しているのに使用されます。

  * The index file is a cache of the state of a directory tree,
    used to create commits, check out working directories, and
    hold the various trees involved in a merge.
//   * 索引ファイルはディレクトリツリー状態のキャッシュです。
//     コミットを作成する時や作業ディレクトリをチェックアウトする時、
//     マージ時に必要となる様々なツリーを保持するのに使用されます。

Part two of this tutorial explains the object
database, the index file, and a few other odds and ends that you'll
need to make the most of git. You can find it at linkgit:gittutorial-2[7].
// チュートリアルのパート２では、
// オブジェクトデータベース、索引ファイル、そして
// git を最大限利用するため必要となる残りの部分について説明します。
// linkgit:gittutorial-2[7]を参照して下さい.

If you don't want to continue with that right away, a few other
digressions that may be interesting at this point are:
// 今すぐ続きを学習したくない人は、この時点から他に以下のような
// 脱線をしてみるのも面白いでしょう。

  * linkgit:git-format-patch[1], linkgit:git-am[1]: These convert
    series of git commits into emailed patches, and vice versa,
    useful for projects such as the Linux kernel which rely heavily
    on emailed patches.
//   * linkgit:git-format-patch[1], linkgit:git-am[1]: これらは
//     一連の git のコミットを E-mail のパッチに変換し、またその逆を
//     行います。Linux カーネルのように E-mail のパッチに強く依存している
//     プロジェクトで役に立ちます。

  * linkgit:git-bisect[1]: When there is a regression in your
    project, one way to track down the bug is by searching through
    the history to find the exact commit that's to blame.  Git bisect
    can help you perform a binary search for that commit.  It is
    smart enough to perform a close-to-optimal search even in the
    case of complex non-linear history with lots of merged branches.
//   * linkgit:git-bisect[1]: プロジェクトに後戻りがあった時に、
//     そのバグを追跡する方法としては、履歴を検索し原因となる適切なコミットを
//     見つけ出す方法があります。
//     git bisect はそのコミットをバイナリ検索する手助けをします。
//     多くのマージブランチを持つ複雑で非線形な場合であっても、
//     最適に検索を実行することができます。

  * link:everyday.html[Everyday GIT with 20 Commands Or So]
//   * link:everyday.html[約20個のコマンドによる日々の GIT活用]

  * linkgit:gitcvs-migration[7]: Git for CVS users.
//   * linkgit:gitcvs-migration[7]: CVSユーザのためのgit.

SEE ALSO
--------
// == 参考
linkgit:gittutorial-2[7],
linkgit:gitcvs-migration[7],
linkgit:gitcore-tutorial[7],
linkgit:gitglossary[7],
linkgit:git-help[1],
link:everyday.html[Everyday git],
link:user-manual.html[The Git User's Manual]
// linkgit:gittutorial-2[7],
// linkgit:gitcvs-migration[7],
// linkgit:gitcore-tutorial[7],
// linkgit:gitglossary[7],
// linkgit:git-help[1],
// link:everyday.html[Everyday git],
// link:user-manual.html[The Git User's Manual]

GIT
---
// == GIT
Part of the linkgit:git[1] suite.
// linkgit:git[1] スイートの一部
